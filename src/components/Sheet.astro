---
import { getSiteSettings } from "@/lib/settings";

interface Props {
    class?: string;
    [key: string]: unknown;
}

const { class: classNames = "", ...props } = Astro.props;
const settings = await getSiteSettings();
const { sitename } = settings;
---

<div
    class="sheet"
    x-data="{ open: true }"
    :class="{ 'sheet--drawer-open': open }"
    @keyup.esc="open = false"
>
    <!-- Drawer -->
    <aside
        class="sheet__drawer sm:pt-24 flex flex-col bg-base border-r-2"
        id="drawer"
        @click.outside="open = false"
        @keyup.esc="open = false"
    >
        <div class="sheet__drawer-inner">
            <slot name="aside" />
        </div>
        <button class="py-4 border-t sm:hidden" @click="open = false"
            >close</button
        >
    </aside>
    <div
        class="sheet__main"
        :class="open ? 'overflow-y-clip' : 'overflow-y-auto'"
        {...props}
    >
        <header
            class="sticky top-0 z-10 overflow-x-visible flex gap-4 items-center"
        >
            <button
                class="group row-start-1 z-10 flex gap-y-4 bg-background justify-center h-24 flex-col py-4 px-4 hover:bg-accent/50 w-24"
                :aria-expanded="open.toString()"
                aria-controls="drawer"
                @click.stop="open = !open"
                :class="open ? '-translate-x-[calc(2px_+_100%)]': 'items-start'"
            >
                <span
                    class="w-14 h-0.5 transition-all bg-foreground block rounded-lg"
                    :class="[open ? '-rotate-45 translate-x-[0.45rem] translate-y-[9px] group-hover:w-[50px]' : 'group-hover:w-[30px]']"
                ></span>
                <span
                    class="w-14 group-hover:w-[49px] transition-all h-0.5 bg-foreground block rounded-lg"
                    x-show="!open"></span>
                <span
                    class="w-14 h-0.5 transition-all bg-foreground block rounded-lg"
                    :class="[open ? 'rotate-45 translate-x-[0.45rem] -translate-y-[9px] group-hover:w-[50px]' : 'group-hover:w-[45px]']"
                ></span>
            </button>
            <h1 class="text-2xl font-semibold">
                {sitename}
            </h1>
        </header>
        <slot />
    </div>
</div>

<style scoped>
    :root {
        --drawer-width: calc(40rem - 40px);
        --drawer-height: 100vh;
        --drawer-transition-duration: 0.3s;
        --drawer-transition-timing: ease-in-out;
    }

    .sheet {
        display: grid;
        /* The first column is for the drawer, starts at 0 width */
        grid-template-columns: 0 1fr;
        grid-template-rows: auto;
        grid-template-areas: "drawer main";
        height: 100svh;
        overflow: clip;
        transition:
            grid-template-columns var(--drawer-transition-duration)
                var(--drawer-transition-timing),
            grid-template-rows var(--drawer-transition-duration)
                var(--drawer-transition-timing);
    }

    .sheet__main {
        grid-area: main;
        scroll-snap-type: y mandatory;
        width: 100vw;
        height: 100svh;
        overflow-x: visible;
    }

    /* When the drawer is open, change the first column's width */
    .sheet--drawer-open {
        grid-template-columns: var(--drawer-width) 1fr;
    }

    .sheet__drawer {
        grid-area: drawer;
        overflow: hidden;
        box-sizing: border-box;
    }

    /* Inner container ensures content doesn't get cut off and is scrollable */
    .sheet__drawer-inner {
        width: var(--drawer-width);
        height: 100%;
        overflow-y: auto;
    }

    @media (width <= 40rem) {
        .sheet {
            grid-template-columns: 1fr;
            grid-template-rows: 0 auto;
            grid-template-areas:
                "drawer"
                "main";
        }
        .sheet--drawer-open {
            grid-template-rows: var(--drawer-height) auto;
        }
    }
</style>
