---
import { actions } from "astro:actions";
---
<div

x-data="contactForm()"
>


<form
  id="contact-form"
  @submit="submit"
  x-ref="form"
  class="space-y-4 bg-base-lighter border border-muted px-6 py-4 max-w-xl rounded flex flex-col"
>
<div x-show="message && message?.length > 1" x-text="message"
></div>
  <div class="flex flex-col">
    <label for="name">Name</label>
    <input
      type="text"
      name="name"
      placeholder="Name"
    />
    <p class="text-error"></p>
  </div>

  <div class="flex flex-col">
    <label for="email">Email</label>
    <input
      type="email"
      transition:persist
      name="email"
      placeholder="Email"
      required
    />
    <p class="text-error"></p>
  </div>

  <div class="flex flex-col">
    <label for="message">Message</label>
    <textarea
      transition:persist
      name="message"
      placeholder="Message"
      required
    />
    <p class="text-error text-sm" x-text="fieldErrors.message"></p>
  </div>

  <button
    class="bg-primary text-base px-6 py-2 rounded hover:bg-primary-lighter"
    type="submit"
    :disabled="loading"
    x-text="loading ? 'Sending...' : 'Send'"
  >
  </button>

</form>
</div>

<script>

import Alpine from "alpinejs";
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";

interface ContactFormRefs {
  form: HTMLFormElement;
}
interface ContactFormData {
  name: string;
  email: string;
  message: string;
}

interface FieldErrors {
  name: string;
  email: string;
  message: string;
}

Alpine.data('contactForm', () => ({
        $refs: {} as ContactFormRefs,
        form: {
          name: "",
          email: "",
          message: ""
        },
        fieldErrors: {
          name: "",
          email: "",
          message: ""

        } as FieldErrors,
        message: null as string | null,
        loading: false as boolean,
        isError: true,
        async submit(e: SubmitEvent) {
          e.preventDefault();
          this.loading = true;
          const formData = new FormData(this.$refs.form);
          const {data, error} = await actions.contact(formData);
          this.loading = false;
          if (isInputError(error)) {
            const fields = Object.keys(this.fieldErrors);
            fields.forEach(field => {
              if (field in error.fields) {
                // @ts-ignore
                this.fieldErrors[field as keyof FieldErrors] = error.fields[field].join(", ");
              }
            });
          }

          if (data?.success) {
            this.message = data.message
            this.isError = false
          } else {
            this.isError = true
          }
        },
        reset() {
          this.loading = false;
          this.$refs.form.reset();
        }
    }
))
</script>
