---
import Layout from "@/layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { Image } from "astro:assets";
import { render } from "astro:content";
import { getCollection } from "astro:content";

export const prerender = true;

export const getStaticPaths = (async () => {
    const pages = await getCollection("artwork", ({ data }) => !data.isDraft);
    return pages.map((page) => ({
        params: { slug: page.id },
        props: { page },
    }));
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const { title, tags, gallery, featured, year } = page.data;
const { Content } = await render(page);
---

<Layout {title} x-data="page()" >
    <section
        class="snap-end h-[calc(100svh_-_96px)] flex flex-col justify-center items-center"
        x-intersect.full="showTitle = true"
        x-intersect:leave="showTitle = false"
    >
        <h1 class="text-3xl sm:text-5xl font-bold  title-animation" :class="showTitle ? 'title-visible' : ''">
            {title}.
        </h1>
            <p class="font-body text-sm sm:text-xl font-thin transition" :class="showTitle ? 'opacity-100' : 'opacity-0'" >{tags?.map(tag => '#' + tag)?.join(', ') || ''} ({year})</p>.
    </section>
    {
        gallery && (
            <section class="snap-end container-fullbreak h-svh pt-24 pb-16">
                <div class="embla" >
                <div class="embla__viewport overflow-hidden " x-ref="embla" >
                   <div class="embla__container flex space-x-2">
                       {gallery.map((item, index) => (
                       <div class="embla__slide flex-none w-auto min-w-[0]">
                           <Image
                                src={item}
                                alt={`Image of ${title} - ${year}`}
                                layout="constrained"
                                class="w-full h-full object-cover sm:w-auto sm:h-auto"
                                height={500}
                            />
                       </div>
                       ))}
                   </div>
                </div>


                <div class="grid-container py-4 place-items-end">
                <div class="embla__dots space-x-2" >
                    {gallery.map((_, index) => (
                        <button
                        :class={`slideIndex === ${index} ? 'border-foreground' : 'border-muted ring-muted '`}
                        @click={`embla.scrollTo(${index})`}
                        class="embla__dot w-4 h-4 rounded-full hover:ring-2 border-2 transition druation-200" aria-label={`Slide ${index + 1}`} />
                    ))}
                </div>
                </div>
                </div>
            </section>
        )
    }
    {
        page?.body && (
        <article
            class="max-w-2xl flex justify-center items-center pt-36 pb-10 snap-start"
            x-intersect:enter.threshold.10="showContent = true"
            x-intersect:leave="showContent = false"
        >
            <div class="content-wrapper w-full" :class="showContent ? 'content-visible' : ''">
                <Content />
            </div>
        </article>
        )
    }

</Layout>

<script>
import EmblaCarousel from "embla-carousel";
import type { EmblaCarouselType, EmblaOptionsType } from "embla-carousel";


const alpineDataInit = () => {


window.Alpine.data('page', () => ({
  showTitle: false,
  showContent: false,
  activeIndex: 0,
  slideIndex: 0,
  embla: null as null | EmblaCarouselType,
  init() {
    const options = {loop: true} as EmblaOptionsType;
    this.embla = EmblaCarousel(this.$refs.embla, options);
    const updateIndex = () => {
      if (this.embla) {
        this.slideIndex = this.embla.selectedScrollSnap();
      }
    }
    this.embla.on('select', updateIndex);
    this.embla.on('init', updateIndex);
    this.embla.on('reInit', updateIndex);

    document.addEventListener('keyup', (e) => {
      if (e.key === 'ArrowRight') {
        this.embla?.scrollNext();
      } else if (e.key === 'ArrowLeft') {
        this.embla?.scrollPrev();
      }
    });
  }
}))
}

document.addEventListener('alpine:init', alpineDataInit)
</script>

<style>
    @reference "@/styles/global.css";
    .img-placeholder {
        @apply bg-muted;
    }
    .carousel {

    }

    /* Title animation */
    .title-animation {
        opacity: 0;
        transform: translateY(5rem);
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    }

    .title-visible {
        opacity: 1;
        transform: translateY(0);
    }

    /* Content animations */
    .content-wrapper :global(h2),
    .content-wrapper :global(h3),
    .content-wrapper :global(p),
    .content-wrapper :global(img),
    .content-wrapper :global(blockquote),
    .content-wrapper :global(ul),
    .content-wrapper :global(ol) {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    }

    .content-visible {
        & :global(h2),
        & :global(h3),
        & :global(p),
        & :global(img),
        & :global(blockquote),
        & :global(ul),
        & :global(ol) {
            opacity: 1;
            transform: translateY(0);
        }

        & :global(*:nth-child(1)) { transition-delay: 0.1s; }
        & :global(*:nth-child(2)) { transition-delay: 0.2s; }
        & :global(*:nth-child(3)) { transition-delay: 0.3s; }
        & :global(*:nth-child(4)) { transition-delay: 0.4s; }
        & :global(*:nth-child(5)) { transition-delay: 0.5s; }
        & :global(*:nth-child(6)) { transition-delay: 0.6s; }
        & :global(*:nth-child(7)) { transition-delay: 0.7s; }
        & :global(*:nth-child(8)) { transition-delay: 0.8s; }
    }
</style>
